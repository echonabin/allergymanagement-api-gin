package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"math/rand"

	"github.com/echonabin/allergymanagement-api/db"
	"github.com/echonabin/allergymanagement-api/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &model.User{
		ID:       fmt.Sprintf("T%d", rand.Int()),
		Email:    input.Email,
		FullName: input.FullName,
		Password: input.Password,
	}
	db := db.Model

	result := db.Create(&user)

	if result.Error != nil {
		panic("Error while creating user")
	}

	r.user = append(r.user, user)
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, id *string) ([]*model.User, error) {
	user := []*model.User{}
	db := db.Model

	if id == nil {
		return r.user, nil
	}

	if err := db.First(&user, "id=?", *id).Error; err != nil {
		return nil, err
	} else {
		return user, nil
	}
}
